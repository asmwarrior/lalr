
buildfile "lua_examples/lua_examples.build";
buildfile "lua_test/lua_test.build";
buildfile "lua_unit/lua_unit.build";

for _, build in build:default_builds() do
    build:Library "lua" {
        libraries = {
            "sweet/error/error",
            "sweet/rtti/rtti",
            "lua/liblua",
            "sweet/assert/assert",
        };

        build:Cxx () {
            "AddGlobal.cpp", 
            "AddMember.cpp",
            "AddMemberHelper.cpp",
            "AddParameter.cpp",
            "AddParameterHelper.cpp",
            "Lua.cpp",
            "LuaAllocator.cpp",
            "LuaConverter.cpp",
            "LuaFileReader.cpp",
            "LuaGlobalEnvironment.cpp", 
            "LuaMemoryReader.cpp",
            "LuaObject.cpp",
            "LuaOutOfOrderParameter.cpp",
            "LuaNil.cpp",
            "LuaPreprocessReader.cpp",
            "LuaRawWrapper.cpp",
            "LuaScheduler.cpp",
            "LuaStackGuard.cpp", 
            "LuaThread.cpp",
            "LuaThreadEventSink.cpp",
            "LuaThreadPool.cpp",
            "LuaThreadPoolEventSink.cpp",
            "LuaUserData.cpp", 
            "LuaValue.cpp",
            "lua_functions.cpp",
            "lua_types.cpp"       
        };
    };
end
